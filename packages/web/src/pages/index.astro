---
import { getClient } from "github-client";
import GlobalLayout from "../layouts/GlobalLayout.astro";
import { marked } from "marked";
import { css } from "@styled-system/css";
import "@fontsource/long-cang";
import { aspectRatio, circle, flex, hstack } from "@styled-system/patterns";
const client = getClient();
const owner = "wenxiangdong";
const repo = "poems";
const list = await client.paginate(client.rest.issues.listForRepo, {
  owner,
  repo,
  per_page: 100,
});
marked.use({
  renderer: {
    blockquote({ tokens }) {
      const text = this.parser.parse(tokens);
      return `
            <blockquote class="${css({
              opacity: "0.5",
              margin: 4,
              fontSize: "sm",
              spaceY: 2,
              "& p::before": {
                content: "open-quote",
              },
              "& > p": {
                fontSize: "initial",
              },
            })}">
              ${text}
            </blockquote>
            `;
    },
    paragraph({ tokens }) {
      return `
      <p class="${css({
        textAlign: "justify",
        display: "flex",
        justifyContent: "center",
        fontSize: "lg",
      })}" >${tokens.map((t) => t.raw).join("")}</p>
      `;
    },
  },
});
const me = (await client.rest.users.getByUsername({ username: owner })).data;
const REACTION_2_EMOJI = {
  "+1": "👍",
  "-1": "👎",
  heart: "❤️",
  laugh: "😄",
  confused: "😕",
  hooray: "🎉",
  eyes: "👀",
  rocket: "🚀",
};
const issues = await Promise.all(
  list.map(async (item) => {
    return {
      title: item.title,
      body: await marked.parse(item.body ?? ""),
      user:
        item.user?.type === "Bot"
          ? {
              ...me,
              name: "文向东",
            }
          : item.user,
      html_url: item.html_url,
      reactions: Object.entries(REACTION_2_EMOJI)
        .map(
          ([key, emoji]) =>
            [
              emoji,
              item.reactions?.[key as keyof typeof item.reactions],
            ] as const
        )
        .filter(([, count]) => !!count),
    };
  })
);
---

<GlobalLayout>
  <style>
    @keyframes my-animation {
      0% {
        transform: scale(0.1);
        opacity: 0;
      }
      45% {
        transform: scale(0.1);
        opacity: 0;
      }
      50% {
        transform: scale(1);
        opacity: 1;
      }
      55% {
        transform: scale(0.1);
        opacity: 0;
      }
      100% {
        transform: scale(0.1);
        opacity: 0;
      }
    }
    .container {
      scroll-snap-type: y mandatory;
      width: 100vw;
      height: 100vh;
      overflow-y: auto;
    }
    .page {
      width: 100%;
      height: 100%;
      padding: 1.5em;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      scroll-snap-align: center;
      view-timeline-name: --page-view;
      animation-name: my-animation;
      animation-duration: 1ms;
      animation-fill-mode: both;
      animation-direction: alternate;
      animation-timing-function: ease;
      animation-timeline: --page-view;
    }

    blockquote {
      quotes: "\201C" "\201D";
    }
  </style>
  <div class="container">
    {
      issues.map((issue) => (
        <div class="page">
          <h1
            class={css({
              fontSize: "4xl",
              fontFamily: "'Long Cang'",
              textAlign: "center",
            })}
            id={issue.title}
          >
            <a href={issue.html_url} target="_blank">
              {issue.title}
            </a>
          </h1>
          <div>
            <a
              class={flex({ gap: "2", alignItems: "center" })}
              href={issue.user?.html_url}
              target="_blank"
            >
              <img
                src={issue.user?.avatar_url}
                class={circle({
                  size: "4",
                })}
              />
              {issue.user?.name ?? issue.user?.login}
            </a>
          </div>
          <article set:html={issue.body} />
          <div class={hstack({ gap: "2" })}>
            {issue.reactions.map(([emoji, count]) => (
              <span
                class={css({
                  // paddingBlock: "1",
                  paddingInline: "2",
                  rounded: "full",
                  borderColor: {
                    _dark: "white",
                    base: "darkgray",
                  },
                  borderWidth: "thin",
                  borderStyle: "solid",
                })}
              >
                <span>{emoji}</span>
                <span>{count}</span>
              </span>
            ))}
          </div>
        </div>
      ))
    }
  </div>
</GlobalLayout>
